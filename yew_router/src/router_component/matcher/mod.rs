//! Logic for matching and capturing route strings.
use std::fmt::Debug;
use regex::Regex;
use yew_router_path_matcher::{PathMatcher, Matches};


mod regex_matcher;

/// An enum that contains variants that can match a route string
#[derive(Debug)]
pub enum Matcher {
    /// A matcher generated by the route macro.
    RouteMatcher(PathMatcher),
    /// A matcher that uses a regex to match and capture values.
    RegexMatcher(Regex),
    /// A user-defined matcher.
    CustomMatcher(Box<dyn MatcherProvider>)
}

/// Trait that allows user-defined matchers.
pub trait MatcherProvider: Debug {
    /// Given itself and a route string, determine if the route matches by returning an Option
    /// possibly containing any sections captured by the matcher.
    fn match_route_string<'a, 'b: 'a>(&'b self, route_string: &'a str) -> Option<Matches<'a>>;
}

impl Matcher {
    /// Given itself and a route string, determine if the route matches by returning an Option
    /// possibly containing any sections captured by the matcher.
    pub fn match_route_string<'a, 'b: 'a>(&'b self, route_string: &'a str) -> Option<Matches<'a>> {
        match self {
            Matcher::RouteMatcher(matcher) => {
                matcher.match_path(route_string).map(|x| x.1).ok()
            }
            Matcher::RegexMatcher(regex) => regex.match_route_string(route_string),
            Matcher::CustomMatcher(matcher) => matcher.match_route_string(route_string)
        }
    }
}

impl From<PathMatcher> for Matcher {
    fn from(value: PathMatcher) -> Self {
        Matcher::RouteMatcher(value)
    }
}

impl From<Box<dyn MatcherProvider>> for Matcher {
    fn from(value: Box<dyn MatcherProvider>) -> Self {
        Matcher::CustomMatcher(value)
    }
}

