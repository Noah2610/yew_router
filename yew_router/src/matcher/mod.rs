//! Logic for matching and capturing route strings.
use std::fmt::Debug;


use std::collections::HashMap;
use yew::{Component, Html};

pub use yew_router_route_parser::{FromMatches, FromMatchesError, CaptureVariant, MatcherToken};

#[cfg(feature = "regex_matcher")]
mod regex_matcher;
#[cfg(feature = "regex_matcher")]
use regex::Regex;


#[cfg(feature = "route_matcher")]
pub mod route_matcher;
#[cfg(feature = "route_matcher")]
pub use self::route_matcher::{RouteMatcher};


/// An enum that contains variants that can match a route string
#[derive(Debug)]
pub enum Matcher {

    #[cfg(feature = "route_matcher")]
    /// A matcher generated by the route macro.
    RouteMatcher(RouteMatcher),
    #[cfg(feature = "regex_matcher")]
    /// A matcher that uses a regex to match and capture values.
    RegexMatcher(Regex),
    /// A user-defined matcher.
    CustomMatcher(Box<dyn MatcherProvider>)
}

/// Trait that allows user-defined matchers.
pub trait MatcherProvider: Debug {
    /// Given itself and a route string, determine if the route matches by returning an Option
    /// possibly containing any sections captured by the matcher.
    fn match_route_string<'a, 'b: 'a>(&'b self, route_string: &'a str) -> Option<Matches<'a>>;
}

impl Matcher {
    /// Given itself and a route string, determine if the route matches by returning an Option
    /// possibly containing any sections captured by the matcher.
    pub fn match_route_string<'a, 'b: 'a>(&'b self, route_string: &'a str) -> Option<Matches<'a>> {
        match self {
            #[cfg(feature = "route_matcher")]
            Matcher::RouteMatcher(matcher) => {
                matcher.match_route(route_string).map(|x| x.1).ok()
            }
            #[cfg(feature = "regex_matcher")]
            Matcher::RegexMatcher(regex) => regex.match_route_string(route_string),
            Matcher::CustomMatcher(matcher) => matcher.match_route_string(route_string)
        }
    }
}



/// Matches contain keys corresponding to named capture sections,
/// and values containing the content captured by those sections.
pub type Matches<'a> = HashMap<&'a str, String>;

/// Render function.
pub trait RenderFn<CTX: Component>: Fn(&Matches) -> Option<Html<CTX>> {}

impl<CTX, T> RenderFn<CTX> for T
    where
        T: Fn(&Matches) -> Option<Html<CTX>>,
        CTX: Component,
{
}



impl From<Box<dyn MatcherProvider>> for Matcher {
    fn from(value: Box<dyn MatcherProvider>) -> Self {
        Matcher::CustomMatcher(value)
    }
}

